#!/bin/bash
# subversion extension to support a special case of repeated merges
# Johannes Winkelmann <jw@tks6.net>
#
# TEST VERSION!

VERSION=0.6
BRANCHPOINT=branch-point


# done:
#   $ merge-from x86 trunk/gcc
#   $ release gcc base
#
# missing
#   $ diff x86 trunk/gcc
#   $ merge-from sparc -r 25 base/gcc


function assert() {
    if [ "$2" = "" ]; then
	echo "Error: $1. Exiting"
	exit -1
    fi
}

if [ -f .xsvn-config ]; then
    source .xsvn-config
elif [ -f ../.xsvn-config ]; then
    PWD=`pwd`

    # TODO: use last path part as port name
    
    cd ..
else
    echo "No .xsvn-config found in . and .."
    exit -1
fi


# XSVN_ARCH is the "work arch"

assert "XSVN_BASE_URL must be set in .xsvn-config" $XSVN_BASE_URL
assert "XSVN_ARCH must be set in .xsvn-config"  $XSVN_ARCH

if [ "$1" = "merge-from" ]; then

    assert "merge-from needs a collection name as first argument" $2
    assert "merge-from needs a port name as second argument" $3

    fromarch=$2
    port=$3
    portname=`basename $port`

    if [ ! -d $portname ]; then
	echo "merging $port from $XSVN_BASE_URL/$fromarch/$port"
	svn cp $XSVN_BASE_URL/$fromarch/$port $portname
	
	bp=`svn log -q $XSVN_BASE_URL/$fromarch/$port|grep -r '^r'|\
	    xargs|sed -e 's/r\([^|]*\)|.*/\1/g'`
	echo "Setting branch-point to '$bp'"
	svn propset $BRANCHPOINT $bp $portname

	echo "Now commit (or revert) your changes"
    else
	bp=`svn propget $BRANCHPOINT $portname`

	if [ ! "$bp" = "" ]; then
	    echo "Merging changes since $bp from $XSVN_BASE_URL/$fromarch/$port"
	    svn merge -r $bp:HEAD $XSVN_BASE_URL/$fromarch/$port $portname
	    svn up $portname

	    bp=`svn log -q $XSVN_BASE_URL/$fromarch/$port|grep -r '^r'|\
		xargs|sed -e 's/r\([^|]*\)|.*/\1/g'`
	    echo "Setting branch-point to '$bp'"
	    svn propset $BRANCHPOINT $bp $portname

	    echo "Now commit (or revert) your changes"
	else
	    echo "Failed to determine branch-point; set property manually"
	fi
    fi
elif [ "$1" = "release" ]; then
    
    if [ "$XSVN_RELEASE" = "" ]; then
	echo "Error: XSVN_RELEASE not set"
	exit -1
    fi
    if [ "$XSVN_COLLECTION" = "" ]; then
	echo "Error: XSVN_COLLECTION not set"
	exit -1
    fi

    assert "release needs a port name as first argument" $2

    port=$2
    coll=$XSVN_COLLECTION
    
    svn ls $XSVN_BASE_URL/$XSVN_ARCH/tags/$XSVN_RELEASE/$coll/$port &> /dev/null
    if [ $? -eq 0 ]; then
        out=`svn diff $XSVN_BASE_URL/$XSVN_ARCH/trunk/$coll/$port $XSVN_BASE_URL/$XSVN_ARCH/tags/$XSVN_RELEASE/$coll/$port`
        if [ $? -ne 0 ] || [ ! "$out" = "" ]; then
            echo "Releasing $port to $XSVN_BASE_URL/$XSVN_ARCH/tags/$XSVN_RELEASE/$coll/$port"
            echo "(removing old version)"
	    svn del $XSVN_BASE_URL/$XSVN_ARCH/tags/$XSVN_RELEASE/$coll/$port \
                    -m "drop old version"
            echo "adding new version"
	    svn cp $XSVN_BASE_URL/$XSVN_ARCH/trunk/$coll/$port \
                   $XSVN_BASE_URL/$XSVN_ARCH/tags/$XSVN_RELEASE/$coll \
		   -m "update $XSVN_ARCH/tags/$XSVN_RELEASE/$coll/$port"
        fi
    else
         echo "adding new version"
         svn cp $XSVN_BASE_URL/$XSVN_ARCH/trunk/$coll/$port \
                $XSVN_BASE_URL/$XSVN_ARCH/tags/$XSVN_RELEASE/$coll/$port $msg \
		-m "add $XSVN_ARCH/tags/$XSVN_RELEASE/$coll/$port"
                     
    fi
elif [ "$1" = "missing" ]; then
    
    if [ "$XSVN_RELEASE" = "" ]; then
	echo "Error: XSVN_RELEASE not set"
	exit -1
    fi
    
    assert "missing needs a collection name as first argument" $2

    fromarch=$2
    coll=$XSVN_COLLECTION

    remote="`svn ls $XSVN_BASE_URL/$2`"
    local="`svn ls $XSVN_BASE_URL/$XSVN_ARCH/tags/$XSVN_RELEASE/$coll`"

    diff -w -t -U 0 <(for r in `echo $remote`; do echo $r; done) \
         <(for l in `echo $local`; do echo $l; done)|sed '/^@@/d' | \
         sed '/^+++/d' | \
         sed '/^---/d'|grep -v ^+|sed -e 's/^-//g'
    
else
    echo "Usage: $0 <command>"
    echo "   where command can be: merge-from, release, missing"
fi

cd $PWD
