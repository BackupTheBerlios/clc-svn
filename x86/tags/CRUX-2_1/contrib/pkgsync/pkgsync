#!/bin/bash
#
#  Synchronize installed software packages with a repository.
#  Usage: pkgsync [options] command <arguments>
#

. /etc/pkgsync.conf

version="1.2"; simulate="false"; diff="false"; sysup="false";

packages=`prt-get listinst -v 2>/dev/null || pkginfo -i`
locked=`cat /var/lib/pkg/prt-get.locker 2>/dev/null`

#  Print a warning.
warn(){
	echo "=======> WARNING: $1" >&2
}

#  Print an error and exit.
error(){
	echo "=======> ERROR: $1" >&2
	exit 1
}

#  Executes $1 if it exists.
execute_script(){
	test -f $1 || return 1
	echo "  Executing `basename $1`.."
	sh $1 >/dev/null 2>&1
}

#  Ensure $1 is a directory and is readable or writeable, depending on the optional parameter $2.
ensure_path(){
	test -d "$1" || error "$1 is not a directory."
	test "$2" = "r" -a ! -r $1 && error "$1 is not readable."
	test "$2" = "w" -a ! -w $1 && error "$1 is not writeable."
}

#  Generate an httpup REPO file for the specified package $1 containing all of its dependencies and 
#  their meta-data.  The file is written to $2 if it is provided, or stdout otherwise.
generate_httpup_repofile(){
	
	test $2 && rm -f $2  #begin with clean file before writing output
	deps="$1 `cat $repository/$1#*-deps 2>/dev/null`"  #resolve deps for httpup package
	
	for dep in $deps; do  #for each dependency		
		for file in $repository/$dep#*; do  #append md5sum to REPO file or stdout
			md5=`md5sum $file`; line="f:${md5%% *}:${file##*/}"
			test $2 && echo $line >> $2 || echo $line
		done		
	done
	
	return 0
}

#  Commit the specified package file $1 to the repository, archiving old versions.  Metadata such as
#  pre/post install scripts and dependency information are also committed to the repository.
commit_package(){
	
	pkg=${1##*/}; name=${pkg%%#*}
	
	mv -f $repository/$name#* $repository/old 2>/dev/null  #archive old version(s)	
	install -m 644 $1 $repository  #copy package to repository	
	
	if which prt-get >/dev/null 2>&1; then  #copy install scripts, store dependency list
	
		path=`prt-get path $name 2>/dev/null`  #resolve path for package
		test -z "$path" && warn "No port for $name.  Could not resolve meta-data." && return 0
		
		install $path/pre-install $repository/$pkg-pre-install 2>/dev/null
		install $path/post-install $repository/$pkg-post-install 2>/dev/null
		
		deps=`prt-get quickdep $name 2>/dev/null | sed "s/$name $//"`  #resolve dependencies		
		test "$deps" && echo $deps > $repository/$pkg-deps  #and store them
		
	else
		warn "No prt-get in $PATH.  Could not resolve meta-data."
	fi
	
	for hp in ${httpup_packages[@]}; do  #update httpup REPO files if necessary
		echo " $hp `cat $repository/$hp#*-deps 2>/dev/null` " | grep " $name " >/dev/null &&
			generate_httpup_repofile $hp $repository/$hp.REPO
	done
	
	return 0
}

#  Install or update the specified package file $1.  This function is recursive, and may invoke itself to install
#  dependencies of $1.  The globals $simulate, $diff, and $sysup determine what action this function takes.
install_package(){
	
	#local pkg=$1; local name=`basename $pkg | sed "s/#.*$//"`
	#local version=`basename $pkg .pkg.tar.gz | sed "s/^.*#//"`
	
	local pkg=${1##*/}; local name=${pkg%%#*};
	local version=${pkg##*#}; version=${version%.pkg.tar.gz}
	
	echo "$installed" | grep " $name " >/dev/null && return 0  #package was just now installed
	echo "$locked" | grep "^$name$" >/dev/null && return 0  #package is locked	by prt-get
	
	local current=`echo "$packages" | grep "^$name "`  #resolve currently installed version
	
	test "$sysup" = "true" -a -z "$current" && return 0  #package not installed, return
	test "$version" = "${current#* }" && return 0  #package is up to date, return
	
	local deps=`cat $repository/$pkg-deps 2>/dev/null`  #read dependency information
	local dep; for dep in $deps; do  #resolve dependencies recurssively
		
		local dpkg=$repository/$dep#*.pkg.tar.gz  #resolve dependent package
		test -f $dpkg && install_package $dpkg && continue  #install dependent package from repo
		
		echo "$packages" | grep "^$dep " >/dev/null ||  #or look for installed version
			error "$name: dependency $dep not found."
	done
	
	alert="Installing" && flag=""; test "$current" && alert="Updating" && flag="-u"  #initialize alert, flag
	
	test "$diff" = "true" && printf "%- 20s%- 20s%- 20s\n" "$name" "$current" "$version" ||
	echo $alert $name $version..  #print alert output
	
	installed="$installed $name "  #append name to installed	
	test "$simulate" = "true" && return 0  #simulate, return
	
	execute_script $repository/$pkg-pre-install  #run pre/post scripts
	pkgadd $flag $repository/$pkg  #and add package
	execute_script $repository/$pkg-post-install
	
	return 0
}

#
#  Execution begins.  Process arguments and dispatch function calls.
#

test "$1" = "-r" && repository=$2 && shift && shift  #override repository

case "$1" in
	"-v")  #print version and exit
		echo "Pkgsync $version, Copyright Jay Dolan 2004-2005"
		exit 0
		;;
		
	"commit")  #commit specified packages to repository
		ensure_path "$repository" "r"; ensure_path "$repository" "w"
		ensure_path "$repository/old" "w"
		
		shift && for i in $@; do
			test -f $i && commit_package $i || error "$i does not exist."
		done
		;;
		
	"mkhttpup")	#generate httpup REPO file for specified packages to stdout
		ensure_path "$repository" "r"
		
		shift && for i in $@; do
			pkg=$repository/$i#*.pkg.tar.gz
			test -f $pkg && generate_httpup_repofile $i || error "Package $i not found."
		done | sort -u  #filter duplicates
		;;
		
	"testinst")  #simulate install/update of specified packages from repository
		ensure_path "$repository" "r"; simulate="true"
		
		echo -e "Testing installation of $@ from $repository..\n"
				
		shift && for i in $@; do
			pkg=$repository/$i#*.pkg.tar.gz
			test -f $pkg && install_package $pkg || error "Package $i not found."
		done
		;;
		
	"install")  #install/update specified packages from repository
		ensure_path "$repository" "r"
		
		echo -e "Installing $@ from $repository..\n"
		
		shift && for i in $@; do
			pkg=$repository/$i#*.pkg.tar.gz
			test -f $pkg && install_package $pkg || error "Package $i not found."
		done
		;;
		
	"sysdiff")  #diff only installed packages in repository
		ensure_path "$repository" "r"; simulate="true"; sysup="true"; diff="true"
		
		echo -e "Differences between installed packages and $repository:\n"
		echo -e "Packages            Installed           Available in repository\n"
		
		for i in $repository/*.pkg.tar.gz; do
			test -f $i && install_package $i
		done
		;;
		
	"sysup")  #update only installed packages in repository
		ensure_path "$repository" "r"; sysup="true";
		
		echo -e "Performing sysup in $repository..\n"
		
		for i in $repository/*.pkg.tar.gz; do
			test -f $i && install_package $i
		done
		;;
		
	"diff")  #diff all packages in repository
		ensure_path "$repository" "r"; simulate="true"; diff="true"
		
		echo -e "Differences between installed packages and $repository:\n"
		echo -e "Packages            Installed           Available in repository\n"
		
		for i in $repository/*.pkg.tar.gz; do
			test -f $i && install_package $i
		done
		;;
	
	"sync")  #sync all packages in repository
		ensure_path "$repository" "r";
		
		echo -e "Syncing all in $repository..\n"
		
		for i in $repository/*.pkg.tar.gz; do
			test -f $i && install_package $i
		done
		;;
	
	*)  #show usage and exit
		echo "Usage: pkgsync [options] command <arguments>" >&2
		exit 1
		;;
esac

exit 0

#End of file
